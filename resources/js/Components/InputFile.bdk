import { usePage } from "@inertiajs/react";
import { useEffect, useState } from "react";
import { FilePond, registerPlugin } from "react-filepond";

import FilePondPluginImageExifOrientation from "filepond-plugin-image-exif-orientation";
import FilePondPluginImagePreview from "filepond-plugin-image-preview";
import FilePondPluginFilePoster from "filepond-plugin-file-poster";

import useLocalStorage from "@/Hooks/useLocalStorage";

registerPlugin(
    FilePondPluginImagePreview,
    FilePondPluginImageExifOrientation,
    FilePondPluginFilePoster
);

import "filepond-plugin-image-preview/dist/filepond-plugin-image-preview.css";
import "filepond-plugin-file-poster/dist/filepond-plugin-file-poster.css";

export default function InputFile({ name }) {
    const [files, setFiles] = useLocalStorage(name, ["default", null]);
    const { csrf_token } = usePage().props;

    useEffect(() => {}, []);

    return (
        <FilePond
            onupdatefiles={(file) => {
                console.log("onupdatefiles", file);
            }}
            onprocessfile={(error, file) => {
                console.log("onprocessfile", file);
                setFiles([file.serverId, file.filename]);
            }}
            allowMultiple={false}
            maxFiles={1}
            files={[
                {
                    source: files[0],
                    options: {
                        type: "limbo",
                    },
                },
            ]}
            beforeAddFile={(item) => {
                console.log("items : ", item);
            }}
            imagePreviewHeight={125}
            server={{
                url: "/filepond/upload/",
                headers: {
                    "X-CSRF-TOKEN": csrf_token,
                },
                chunkForce: true,
                load: {
                    url: "load/",
                },
                restore: {
                    url: "restore/",
                    onload: null,
                    onerror: null,
                    ondata: null,
                },
                process: {
                    url: "process",
                },
                revert: {
                    url: "revert",
                },
            }}
            name={name}
            labelIdle='Drag & Drop your files or <span class="filepond--label-action">Browse</span>'
        />
    );
}
